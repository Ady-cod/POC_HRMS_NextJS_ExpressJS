/* src/components/ModalForm.css */

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: #b1b1b1;
  padding: 30px;
  border-radius: 8px;
  width: auto;
  margin: 0 35px;
  max-height: 90dvh;
  overflow-y: auto;
  position: relative;
}

.modal-close {
  position: absolute;
  top: 15px;
  right: 15px;
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
}

.section-title {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 10px;
  color: #333;
}

.section-subtitle.bold {
  font-size: 14px;
  margin-bottom: 5px;
  color: #333;
  font-weight: bold;
}

.modal-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.input-group {
  display: flex;
  gap: 10px;
  flex-wrap: wrap;
  width: 100%;
}

.input-group.hasErrors {
  row-gap: 35px;
  margin-bottom: 20px;
}
.input-group.hasErrors.address {
  margin-bottom: 0;
}

.input-wrapper {
  position: relative;
  width: 100%;
}

.input-wrapper.error {
  border: 2px solid red;
}

@media (min-width: 406px) {
  .input-wrapper {
    width: calc(50% - 5px);
  }
}

/* Special layout for address input-group */
.address {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: auto auto;
}


/* Street field positioning */
.input-group:has(.country-state-city-layout) > .input-wrapper:first-child {
  grid-column: 1;
  grid-row: 1;
  width: 100%;
}

/* CountryStateCitySelect container positioning */
 .country-state-city-layout {
  grid-column: 1 / -1;
  grid-row: 1 / -1;
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: auto auto;
  gap: 10px;
}

/* Position country field next to street */
.input-group .country-state-city-layout > .input-wrapper:first-child {
  grid-column: 2;
  grid-row: 1;
  width: 100% ;
  position: relative;
}

/* Position state-city row */
.input-group .country-state-city-layout > .state-city-row {
  grid-column: 1 / -1;
  grid-row: 2;
}

/* State and City row - side by side layout */
.state-city-row {
  display: flex;
  gap: 10px;
  align-items: flex-start;
}
.address.hasErrors .country-state-city-layout > .input-wrapper:first-child {
  margin-bottom: 30px;
}
.address.hasErrors .state-city-row .input-wrapper.error  {
  margin-bottom: 20px;
}

/* Mobile responsive layout for address grid */
@media (max-width: 406px) {
  .input-group.hasErrors .country-state-city-layout > .input-wrapper:first-child {
    margin-bottom: 0;
  }
  .input-group.hasErrors {
    row-gap: 10px;
    margin-bottom: 0;
  }
  .input-wrapper.error {
    margin-bottom: 25px;
  }
  .input-group.address {
    margin-bottom: -10px;
  }
  .input-group.address.hasErrors {
    margin-bottom: -10px;
  }
  .input-group.hasErrors .country-state-city-layout  .input-wrapper.error {
    margin-bottom: 25px;
  }

  /*   Stack the outer address group as 2 rows ................ */
  .input-group.address {
    grid-template-columns: 1fr; /* 1 column = full width           */
    grid-template-rows: auto auto; /* row1 Street | row2 CSC-block    */
  }

  /*   Place STREET in row-1 / col-1 .......................... */
  .input-group.address > .input-wrapper:first-child {
    grid-column: 1;
    grid-row: 1;
  }

  /*   Move the Country-State-City wrapper to row-2 / col-1 ... */
  .input-group.address > .country-state-city-layout {
    grid-column: 1;
    grid-row: 2;
    /*   …and turn *its* inner grid into a single column ...... */
    grid-template-columns: 1fr ; 
    grid-template-rows: auto auto auto; /* Country | State | City */
  }

  /*   Override the desktop “grid-column:2” on the Country box */
  .input-group .country-state-city-layout > .input-wrapper:first-child {
    grid-column: 1 / -1 ; /* span the only column           */
  }

  /*   State-City row becomes vertical on phones .............. */
  .state-city-row {
    flex-direction: column;
  }
}

.input-field {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #d1d5db;
  border-radius: 4px;
  background: #fff;
}

.input-field.password {
  padding-right: 50px;
}

.input-field::placeholder {
  color: #6b7280;
}

/* Consistent hover state for input fields (not in error state) */
.input-wrapper:not(.error):hover .input-field:not(:focus) {
  border-color: #9ca3af; /* gray-400, matches react-select hover */
}

/* Consistent focus state for input fields */
.input-field:focus {
  border-color: black;
  box-shadow: 0 0 0 1px black; /* Mimics react-select focus ring */
  outline: none; /*Remove default browser outline for consistent box-shadow and border */
}

/* Styles for native select dropdown arrow */
select.input-field {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 0.16rem center;
  background-size: 1.1rem 1.1rem;
  padding-right: 2rem;
}

/* Style for native select when placeholder option is selected */
select.input-field:required:invalid {
  color: #6b7280; /* Gray color for placeholder text */
}

/* Style for actual options once selected (to ensure they are not gray) */
select.input-field option {
  color: #000000; /* Black color for selected options */
}

.gender-selection {
  display: flex;
  flex-direction: column;
  gap: 5px;
  font-size: 14px;
  color: #333;
}

.gender-selection label {
  display: flex;
  align-items: center;
  gap: 5px;
}

.terms {
  display: flex;
  flex-direction: column;
  gap: 10px;
  font-size: 14px;
  color: #333;
}

.terms a {
  color: #1d4ed8;
  text-decoration: underline;
}

.submit-button-container {
  display: flex;
  justify-content: flex-end;
}

.submit-button {
  background-color: #1d4ed8;
  color: white;
  padding: 12px 24px;
  font-size: 16px;
  font-weight: bold;
  border: none;
  border-radius: 20px; /* Adjusted for curve border */
  cursor: pointer;
  text-align: center;
}

.submit-button:hover {
  background-color: #1e40af;
}

.error-message {
  position: absolute;
  bottom: -25px;
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  cursor: help;
  color: red;
  font-size: 0.9rem;
  font-weight: 600;
}

/* Tooltip container */
.error-message::after {
  content: attr(data-tooltip);
  position: fixed;
  top: var(--tooltip-y, 0);
  left: var(--tooltip-x, 0);
  background-color: #fff;
  color: red;
  border: 1px solid red;
  border-radius: 4px;
  padding: 8px 12px;
  font-size: 0.875rem;
  white-space: normal;
  word-break: break-word;
  width: var(--tooltip-width, 300px);
  z-index: 9999;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.2s ease;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
}

/* Show tooltip instantly on hover */
.error-message:hover::after,
.error-message:focus::after,
.error-message:active::after {
  opacity: 1;
  pointer-events: auto;
}
